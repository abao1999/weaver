treename:
   deepntuplizer/tree

selection:
   ### use `&`, `|`, `~` for logical operations on numpy arrays
   ### can use functions from `math`, `np` (numpy), and `awkward` in the expression
   (jet_tightId==1) & (fj_sdmass>30) & (jet_no<2) & (fj_pt>200) & (fj_pt<2500) 

test_time_selection:
   ### selection to apply at test time (i.e., when running w/ --predict)
   (jet_tightId==1) & (fj_sdmass>30) & (jet_no<2) & (fj_pt>200) & (fj_pt<2500) 

new_variables:
   ### [format] name: formula
   ### can use functions from `math`, `np` (numpy), and `awkward` in the expression
   pfcand_mask: awkward.JaggedArray.ones_like(pfcand_etarel)
   sv_mask: awkward.JaggedArray.ones_like(sv_etarel)

preprocess:
  ### method: [manual, auto] - whether to use manually specified parameters for variable standardization
  ### [note]: `[var]_mask` will not be transformed even if `method=auto`
  method: manual
  ### data_fraction: fraction of events to use when calculating the mean/scale for the standardization
  data_fraction: 

inputs:
   pf_points:
      length: 100
      vars: 
         - pfcand_etarel
         - pfcand_phirel
   pf_features:
      length: 100
      vars: 
      ### [format 1]: var_name (no transformation)
      ### [format 2]: [var_name, 
      ###              subtract_by(optional, default=None, no transf. if preprocess.method=manual, auto transf. if preprocess.method=auto), 
      ###              multiply_by(optional, default=1), 
      ###              clip_min(optional, default=-5), 
      ###              clip_max(optional, default=5), 
      ###              pad_value(optional, default=0)]
         - [pfcand_pt_log_nopuppi, 1, 0.5]
         - [pfcand_e_log_nopuppi, 1.3, 0.5]
         - pfcand_etarel
         - pfcand_phirel
         - [pfcand_abseta, 0.6, 1.6]
         - pfcand_charge
         - pfcand_isEl
         - pfcand_isMu
         - pfcand_isGamma
         - pfcand_isChargedHad
         - pfcand_isNeutralHad
         - [pfcand_VTX_ass, 4, 0.3]
         - pfcand_lostInnerHits
         - [pfcand_normchi2, 5, 0.2]
         - [pfcand_quality, 0, 0.2]
         - [pfcand_dz, 0, 180]
         - [pfcand_dzsig, 0, 0.9]
         - [pfcand_dxy, 0.0, 300]
         - [pfcand_dxysig, 0, 1.0]
         - [pfcand_btagEtaRel, 1.5, 0.5]
         - [pfcand_btagPtRatio, 0, 1]
         - [pfcand_btagPParRatio, 0, 1]
         - [pfcand_btagSip3dVal, 0, 100]
         - [pfcand_btagSip3dSig, 0, 0.5]
         - [pfcand_btagJetDistVal, 0, 40]
   pf_mask:
      length: 100
      vars: 
         - pfcand_mask
   sv_points:
      length: 10
      vars:
         - sv_etarel 
         - sv_phirel
   sv_features:
      length: 10
      vars:
         - [sv_pt_log, 4, 0.6]
         - [sv_mass, 1.2, 0.3]
         - sv_etarel
         - sv_phirel
         - [sv_abseta, 0.5, 1.6]
         - [sv_ntracks, 3, 1]
         - [sv_normchi2, 0.8, 0.6]
         - [sv_dxy, 0.4, 0.25]
         - [sv_dxysig, 7, 0.02]
         - [sv_d3d, 0.5, 0.2]
         - [sv_d3dsig, 7, 0.02]
   sv_mask: 
      length: 10
      vars:
         - sv_mask

labels:
   type: simple
   value: [
      label_H_WW_lnuqq,
      fj_isQCD,
      fj_isTop,
      ]

observers:
   - event_no
   - fj_pt
   - fj_eta
   - fj_phi
   - fj_sdmass
   - npfcands

weights:
   use_precomputed_weights: false
   reweight_method: flat
   reweight_vars:
      fj_pt: [200, 251, 316, 398, 501, 630, 793, 997, 1255, 1579, 1987, 2500]
      fj_sdmass: [30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260]
   reweight_classes: [label_H_WW_lnuqq,fj_isQCD,fj_isTop]
   class_weights: [1, 1, 1]